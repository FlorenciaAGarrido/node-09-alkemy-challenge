{
  "info": {
    "_postman_id": "43354756-c70a-441c-b218-9e1f3f2ef002",
    "name": "Challenge Alkemy",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "item": [
            {
              "name": "Get All - Success",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData);\r",
                      "    pm.expect(jsonData).to.have.property('data');\r",
                      "    pm.expect(jsonData.data.docs).to.be.an('array');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{basepath}}/users",
                  "host": ["{{basepath}}"],
                  "path": ["users"],
                  "query": [
                    {
                      "key": "filter[name]",
                      "value": "florencia",
                      "disabled": true
                    },
                    {
                      "key": "filter[email]",
                      "value": "garrido@hotmail.com",
                      "disabled": true
                    },
                    {
                      "key": "options[limit]",
                      "value": "10",
                      "disabled": true
                    },
                    {
                      "key": "optiones[offset]",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "filter[lasName]",
                      "value": "garrido",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get All - Without token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData).to.have.property('error');\r",
                      "     pm.expect(jsonData.error).to.have.property('message');\r",
                      "     pm.expect(jsonData.error.message).to.be.an('string');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{basepath}}/users",
                  "host": ["{{basepath}}"],
                  "path": ["users"],
                  "query": [
                    {
                      "key": "filter[name]",
                      "value": "florencia",
                      "disabled": true
                    },
                    {
                      "key": "filter[email]",
                      "value": "garrido@hotmail.com",
                      "disabled": true
                    },
                    {
                      "key": "options[limit]",
                      "value": "10",
                      "disabled": true
                    },
                    {
                      "key": "optiones[offset]",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "filter[lasName]",
                      "value": "garrido",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Save user Copy",
          "item": [
            {
              "name": "Save User - Success",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('data');\r",
                      "    pm.expect(jsonData.data).to.have.property('email');\r",
                      "    pm.expect(jsonData.data.email).to.be.an('string');\r",
                      "    pm.expect(jsonData.data).to.have.property('_id');\r",
                      "    pm.expect(jsonData.data._id).to.be.an('string');\r",
                      "\r",
                      "\r",
                      "    pm.collectionVariables.set(\"userId\", jsonData.data._id);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set(\"randomNumber\", Math.random());"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMWNmNzczNTFlNDg1MjJhODk5ZjJlZSIsImlhdCI6MTYzMDM0NjAyNSwiZXhwIjoxNjMwNDMyNDI1fQ.i0GFGPYbpfsPq9sDfCKsixSDFtBRJFa_QJilJB00bxk",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"florencia\",\r\n    \"username\": \"flor\",\r\n    \"email\": \"{{randomNumber}}@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{basepath}}/users",
                  "host": ["{{basepath}}"],
                  "path": ["users"],
                  "query": [
                    {
                      "key": "",
                      "value": null,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Save User - Fallure",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set(\"randomNumber\", Math.random());"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('error');\r",
                      "    pm.expect(jsonData.error).to.have.property('message');\r",
                      "    pm.expect(jsonData.error).to.have.property('detail');\r",
                      "    pm.expect(jsonData.error.detail).to.be.an('array');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMWNmNzczNTFlNDg1MjJhODk5ZjJlZSIsImlhdCI6MTYzMDM0NjAyNSwiZXhwIjoxNjMwNDMyNDI1fQ.i0GFGPYbpfsPq9sDfCKsixSDFtBRJFa_QJilJB00bxk",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"florencia\",\r\n    \"lastName\": \"garrido\",\r\n    \"email\": \"garrido@hotmail.com\",\r\n    \"password\": \"1234\",\r\n    \"birthdate\": \"11/11/1999\",\r\n    \"role\": \"ADMIN_ROLE\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{basepath}}/users",
                  "host": ["{{basepath}}"],
                  "path": ["users"],
                  "query": [
                    {
                      "key": "",
                      "value": null,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Update User Copy",
          "item": [
            {
              "name": "Update  User - Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.environment.set(\"userId\", pm.collectionVariables.get(\"userId\"));"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData).to.have.property('data');\r",
                      "    pm.expect(jsonData.data).to.have.property('email');\r",
                      "    pm.expect(jsonData.data.email).to.be.an('string');\r",
                      "    pm.expect(jsonData.data).to.have.property('_id');\r",
                      "    pm.expect(jsonData.data._id).to.be.an('string');\r",
                      "\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMWNmNzczNTFlNDg1MjJhODk5ZjJlZSIsImlhdCI6MTYzMDM0NjAyNSwiZXhwIjoxNjMwNDMyNDI1fQ.i0GFGPYbpfsPq9sDfCKsixSDFtBRJFa_QJilJB00bxk",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"antonela\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{basepath}}/users/:id",
                  "host": ["{{basepath}}"],
                  "path": ["users", ":id"],
                  "query": [
                    {
                      "key": "",
                      "value": null,
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{userId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update  User - Failure",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.environment.set(\"userId\", pm.collectionVariables.get(\"userId\"));"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('error');\r",
                      "    pm.expect(jsonData.error).to.have.property('message');\r",
                      "    pm.expect(jsonData.error).to.have.property('detail');\r",
                      "    pm.expect(jsonData.error.detail).to.be.an('array');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMWNmNzczNTFlNDg1MjJhODk5ZjJlZSIsImlhdCI6MTYzMDM0NjAyNSwiZXhwIjoxNjMwNDMyNDI1fQ.i0GFGPYbpfsPq9sDfCKsixSDFtBRJFa_QJilJB00bxk",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"antonela\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{basepath}}/users/:id",
                  "host": ["{{basepath}}"],
                  "path": ["users", ":id"],
                  "query": [
                    {
                      "key": "",
                      "value": null,
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "abc123"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Delete User Copy",
          "item": [
            {
              "name": "Delete  User - Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.environment.set(\"userId\", pm.collectionVariables.get(\"userId\"));"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData).to.have.property('data');\r",
                      "    pm.expect(jsonData.data).to.have.property('email');\r",
                      "    pm.expect(jsonData.data.email).to.be.an('string');\r",
                      "    pm.expect(jsonData.data).to.have.property('_id');\r",
                      "    pm.expect(jsonData.data._id).to.be.an('string');\r",
                      "\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMWNmNzczNTFlNDg1MjJhODk5ZjJlZSIsImlhdCI6MTYzMDM0NjAyNSwiZXhwIjoxNjMwNDMyNDI1fQ.i0GFGPYbpfsPq9sDfCKsixSDFtBRJFa_QJilJB00bxk",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{basepath}}/users/:id",
                  "host": ["{{basepath}}"],
                  "path": ["users", ":id"],
                  "query": [
                    {
                      "key": "",
                      "value": null,
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{userId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete  User - Failure",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.environment.set(\"userId\", pm.collectionVariables.get(\"userId\"));"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is not 500\", function () {\r",
                      "    pm.response.to.not.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 650ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(650);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is json\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response have correct properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData).to.have.property('data');\r",
                      "    pm.expect(jsonData.data).to.have.property('email');\r",
                      "    pm.expect(jsonData.data.email).to.be.an('string');\r",
                      "    pm.expect(jsonData.data).to.have.property('_id');\r",
                      "    pm.expect(jsonData.data._id).to.be.an('string');\r",
                      "\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMWNmNzczNTFlNDg1MjJhODk5ZjJlZSIsImlhdCI6MTYzMDM0NjAyNSwiZXhwIjoxNjMwNDMyNDI1fQ.i0GFGPYbpfsPq9sDfCKsixSDFtBRJFa_QJilJB00bxk",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{basepath}}/users/:id",
                  "host": ["{{basepath}}"],
                  "path": ["users", ":id"],
                  "query": [
                    {
                      "key": "",
                      "value": null,
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "abc123"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "randomNumber",
      "value": ""
    }
  ]
}
